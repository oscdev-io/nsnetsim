
[tox]
envlist =
    linters
    coverage
#    docs
requires = pip


[testenv]
setenv =
    PYTHONDONTWRITEBYTECODE = 1
    LINT_TARGETS = src tests
    LINT_TARGETS_NOTESTS = src


[testenv:linters]
description = Run all linters.
deps =
    {[testenv:ruff]deps}
commands =
    {[testenv:ruff]commands}


[testenv:ruff]
description = Run Ruff.
deps =
    ruff
skip_install = True
commands =
    ruff format --check {env:LINT_TARGETS}
    ruff check {env:LINT_TARGETS_NOTESTS}


[testenv:unit-tests]
deps =
    {[testenv:runtest]deps}
    pytest
skip_install = True
commands =
    {[testenv:runtest]commands}


[testenv:coverage]
deps =
    {[testenv:unit-tests]deps}
    pytest-cov
    coverage
skip_install = True
commands =
    pytest --cov=nsnetsim {posargs:tests}
    coverage report --show-missing


[testenv:docs]
description = Build HTML documentation.
deps =
    {[testenv:run]deps}
    sphinx
    sphinx-rtd-theme
skip_install = True
commands = sphinx-build -q -W -b html -d {envtmpdir}/doctrees docs docs/build/html


[testenv:serve-docs]
description = Serve HTML documentation.
deps =
    {[testenv:docs]deps}
skip_install = True
commands =
    {[testenv:docs]commands}
    python -m http.server --directory docs/build/html {posargs:8000}


[testenv:cov-html]
description = Generate HTML coverage report.
deps =
    coverage
skip_install = True
commands = coverage html


[testenv:serve-cov]
description = Serve HTML coverage report.
deps =
    {[testenv:cov-html]deps}
skip_install = True
commands =
    {[testenv:cov-html]commands}
    python -m http.server --directory htmlcov {posargs:8100}


[testenv:build]
deps =
    {[testenv:run]deps}
    build
    wheel
    check-wheel-contents
    twine
skip_install = True
commands =
    python -m build --sdist --wheel
    twine check dist/*.tar.gz dist/*.whl
    check-wheel-contents dist/


[testenv:build_flit]
deps =
    {[testenv:run]deps}
    flit
    check-wheel-contents
    twine
skip_install = True
commands =
    flit build --no-setup-py
    twine check dist/*.tar.gz dist/*.whl
    check-wheel-contents dist/


[testenv:publish]
passenv =
    TWINE_USERNAME
    TWINE_PASSWORD
    PUBLISH_REPOSITORY
setenv =
    TWINE_REPOSITORY_URL = {env:PUBLISH_REPOSITORY:https://upload.pypi.org/legacy/}
deps =
    twine
skip_install = True
commands =
    python -m twine upload --verbose dist/*.whl dist/*.tar.gz


[testenv:runtest]
parallel_show_output = True
description = Run tests in test environment.
passenv =
    PYTHONPATH
deps =
    {[testenv:run]deps}
    pytest
skip_install = True
commands =
    pytest {posargs:tests}


[testenv:run]
description = Run nsnetsim.
deps =
    birdclient: git+https//gitlab.oscdev.io/software/birdclient.git@master
    packaging
skip_install = True
commands =
    python -m birdplan {posargs}


[pytest]
addopts = --color yes
