#!/usr/bin/python

"""test."""

from typing import Any, List
import json
import os
import sys
import time

sys.path.insert(0, '%s/src' % os.path.dirname(os.path.abspath(__file__)))

from nsnetsim.topology import Topology
from nsnetsim.bird_router_node import BirdRouterNode


def remove_since(routes: List):
    """Since we cannot compare times, we remove them."""
    for route in routes:
        del route['since']


def write_file(filename: str, data: Any):
    """Write out data in JSON format to a file."""

    with open(filename, 'w') as data_file:
        data_file.write(json.dumps(data, sort_keys=True, indent=4))


def test():
    """Test our stuff."""

    topology = Topology()

    # Create switches
    print('Adding switches...')

    # Create routers
    router_x = topology.add_router('routerX', router_class=BirdRouterNode,
                                   configfile='/root/routers/rX/config/bird.conf')
    router_y = topology.add_router('routerY', router_class=BirdRouterNode,
                                   configfile='/root/routers/rY/config/bird.conf')

    router_a = topology.add_router('routerA', router_class=BirdRouterNode,
                                   configfile='/root/routers/rA/config/bird.conf')
    router_b = topology.add_router('routerB', router_class=BirdRouterNode,
                                   configfile='/root/routers/rB/config/bird.conf')

#    # Add interfaces to routers
    router_x_eth0 = router_x.add_interface('eth0', mac='02:01:00:00:00:01')
    router_x_eth0.add_ip(['192.168.0.1/24', 'fec0::1/64'])
    router_x_eth9 = router_x.add_interface('eth9', mac='02:01:00:00:00:02')
    router_x_eth9.add_ip(['172.16.10.1/24', 'fefe::1/64'])

    router_x.add_route(['172.16.100.0/24', 'via', '172.16.10.10'])
    router_x.add_route(['fefe:1::/64', 'via', 'fefe::10'])

    router_y_eth0 = router_y.add_interface('eth0', mac='02:02:00:00:00:01')
    router_y_eth0.add_ip(['192.168.0.2/24', 'fec0::2/64'])

    router_a_eth0 = router_a.add_interface('eth0', mac='02:03:00:00:00:01')
    router_a_eth1 = router_a.add_interface('eth1', mac='02:03:00:00:00:02')
    router_a_eth0.add_ip(['192.168.0.3/24', 'fec0::3/64'])
    router_a_eth1.add_ip(['192.168.1.1/24', 'fec0:1::1/64'])

    router_b_eth0 = router_b.add_interface('eth0', mac='02:04:00:00:00:01')
    router_b_eth0.add_ip(['192.168.1.2/24', 'fec0:1::2/64'])
    router_b_eth9 = router_b.add_interface('eth9', mac='02:04:00:00:00:02')
    router_b_eth9.add_ip(['172.16.20.1/24', 'febe::2/64'])

#    # Create switches
    # X + Y => (eth0) A (eth1) => B
    switch_a = topology.add_switch('switchA')
    switch_a.add_interface(router_x_eth0)
    switch_a.add_interface(router_y_eth0)
    switch_a.add_interface(router_a_eth0)

    switch_b = topology.add_switch('switchB')
    switch_b.add_interface(router_a_eth1)
    switch_b.add_interface(router_b_eth0)

    topology.build()
#    # Test ping works
#    res = router_x.run('ping', '-c', '1', '192.168.0.2')

#    res = router_x.run(['ip', '--json', 'link'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
#    print(f'RETURN CODE: {res.returncode}')
#    if res.returncode:
#        print(f'ERROR: {res.stdout}')
#    else:
#        json_string = res.stdout.decode('utf-8')
#        parsed = json.loads(json_string)
#        print(json.dumps(parsed, sort_keys=True, indent=4))
#
#    # Check lo is up...
#    interface_lo = [i for i in parsed if i['ifname'] == 'lo'][0]
#    if 'UP' in interface_lo['flags']:
#        print('WOOHOOOO lo is UP')

#    res = router_x.run(['fping', '-C', '1', '--addr', '--quiet', '192.168.0.2'])

    time.sleep(30)

#    res = router_x.run(['ifconfig'])

#    router_x.birdc('show route table t_kernel4')
#    router_x.birdc('show route table t_kernel6')
#    router_x.birdc('show protocols')
    res = router_b.birdc_show_route_table('t_static4')
    remove_since(res)
    write_file('rB.t_static4.dump', res)

    res = router_b.birdc_show_route_table('t_kernel4')
    remove_since(res)
    write_file('rB.t_kernel4.dump', res)

    res = router_b.birdc_show_route_table('t_ospf4')
    remove_since(res)
    write_file('rB.t_ospf4.dump', res)

    res = router_b.birdc_show_route_table('t_static6')
    remove_since(res)
    write_file('rB.t_static6.dump', res)

    res = router_b.birdc_show_route_table('t_kernel6')
    remove_since(res)
    write_file('rB.t_kernel6.dump', res)

    res = router_b.birdc_show_route_table('t_ospf6')
    remove_since(res)
    write_file('rB.t_ospf6.dump', res)


#    router_x.birdc('show route table t_static4 all')
#    router_x.birdc('show route table t_static6 all')
#    router_x.birdc('show route table t_ospf4 all')
#    router_x.birdc('show route table t_ospf6 all')
#    router_x.birdc('show route table t_kernel4 all')
#    router_x.birdc('show route table t_kernel6 all')
#
#    router_b.birdc('show route table t_static4 all')
#    router_b.birdc('show route table t_static6 all')
#    router_b.birdc('show route table t_ospf4 all')
#    router_b.birdc('show route table t_ospf6 all')
#    router_b.birdc('show route table t_kernel4 all')
#    router_b.birdc('show route table t_kernel6 all')
#
#    router_x.run(['echo', 'Router X'])
#    router_x.run(['ip', 'route'])
#    router_x.run(['ip', '-6', 'route'])
#
#    router_b.run(['echo', 'Router B'])
#    router_b.run(['ip', 'route'])
#    router_b.run(['ip', '-6', 'route'])

#    res = router_x.run(['ip', '--json', 'address'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
#    print(f'RETURN CODE: {res.returncode}')
#    if res.returncode:
#        print(f'ERROR: {res.stdout}')
#    else:
#        json_string = res.stdout.decode('utf-8')
#        parsed = json.loads(json_string)
#        print(json.dumps(parsed, sort_keys=True, indent=4))
#    # Check eth0
#    interface_eth0 = [i for i in parsed if i['ifname'] == 'eth0'][0]
#    print(f'SOMETHING: {interface_eth0}')



#    # destroy
    topology.destroy()


#    print(f'end of test: {res}')


if __name__ == '__main__':
    test()
